# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import signals_pb2 as signals__pb2


class SignalGeneratorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NotifySignal = channel.unary_unary(
                '/signals.SignalGenerator/NotifySignal',
                request_serializer=signals__pb2.Signal.SerializeToString,
                response_deserializer=signals__pb2.NotifySignalResponse.FromString,
                )
        self.NotifyOrders = channel.unary_unary(
                '/signals.SignalGenerator/NotifyOrders',
                request_serializer=signals__pb2.Orders.SerializeToString,
                response_deserializer=signals__pb2.NotifyResponse.FromString,
                )
        self.GetPosition = channel.unary_unary(
                '/signals.SignalGenerator/GetPosition',
                request_serializer=signals__pb2.Symbol.SerializeToString,
                response_deserializer=signals__pb2.Position.FromString,
                )
        self.GetSpread = channel.unary_unary(
                '/signals.SignalGenerator/GetSpread',
                request_serializer=signals__pb2.Symbol.SerializeToString,
                response_deserializer=signals__pb2.Spread.FromString,
                )


class SignalGeneratorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NotifySignal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSpread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SignalGeneratorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NotifySignal': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifySignal,
                    request_deserializer=signals__pb2.Signal.FromString,
                    response_serializer=signals__pb2.NotifySignalResponse.SerializeToString,
            ),
            'NotifyOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyOrders,
                    request_deserializer=signals__pb2.Orders.FromString,
                    response_serializer=signals__pb2.NotifyResponse.SerializeToString,
            ),
            'GetPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPosition,
                    request_deserializer=signals__pb2.Symbol.FromString,
                    response_serializer=signals__pb2.Position.SerializeToString,
            ),
            'GetSpread': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSpread,
                    request_deserializer=signals__pb2.Symbol.FromString,
                    response_serializer=signals__pb2.Spread.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'signals.SignalGenerator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SignalGenerator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NotifySignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/signals.SignalGenerator/NotifySignal',
            signals__pb2.Signal.SerializeToString,
            signals__pb2.NotifySignalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/signals.SignalGenerator/NotifyOrders',
            signals__pb2.Orders.SerializeToString,
            signals__pb2.NotifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/signals.SignalGenerator/GetPosition',
            signals__pb2.Symbol.SerializeToString,
            signals__pb2.Position.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSpread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/signals.SignalGenerator/GetSpread',
            signals__pb2.Symbol.SerializeToString,
            signals__pb2.Spread.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
