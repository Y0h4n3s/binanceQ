syntax = "proto3";
package signals;

enum SignalSource {
    SIGNAL_SOURCE_UNSPECIFIED = 0;
    SIGNAL_SOURCE_CHANGE_POINT_DETECTOR = 1;
}

enum Side {
    SIDE_UNSPECIFIED = 0;
    SIDE_BUY = 1;
    SIDE_SELL = 2;
}

enum ExchangeId {
    EXCHANGE_ID_SIMULATED = 0;
    EXCHANGE_ID_BINANCE = 1;
}

enum OrderType {
    ORDER_TYPE_UNSPECIFIED = 0;
    ORDER_TYPE_LIMIT = 1;
    ORDER_TYPE_MARKET = 2;
    ORDER_TYPE_TAKE_PROFIT = 3;
    ORDER_TYPE_STOP_LOSS = 4;
    ORDER_TYPE_TRAILING_STOP_LOSS = 5;
}

enum ClosePolicy {
    CLOSE_POLICY_UNSPECIFIED = 0;
    CLOSE_POLICY_BREAKEVEN = 1;
    CLOSE_POLICY_BREAKEVEN_OR_MARKET_CLOSE = 2;
    CLOSE_POLICY_IMMEDIATE_MARKET = 3;
}

service SignalGenerator {
    rpc NotifySignal (Signal) returns (NotifySignalResponse);
    rpc NotifyOrders (Orders) returns (NotifyResponse);
    rpc GetPosition (Symbol) returns (Position);
    rpc GetSpread (Symbol) returns (Spread);
    rpc GetOpenOrders(Symbol) returns (Orders);
}

message NotifyResponse {
    bool success = 1;
    string message = 2;
}

message Orders {
    repeated Order orders = 1;
}

message Order {
    string id = 1;
    Symbol symbol = 2;
    Side side = 3;
    double price = 4;
    double quantity = 5;
    OrderType order_type = 6;
    uint64 lifetime = 7;
    uint64 timestamp = 8;
    ClosePolicy close_policy = 9;
    string for_id = 10;
    string extra = 11;

}

message Position {
    uint64 id = 1;
    Symbol symbol = 2;
    Side side = 3;
    double qty = 4;
    double quote_qty = 5;
    double avg_price = 6;
    string extra = 7;
}

message Spread {
    Symbol symbol = 1;
    double spread = 2;
    uint64 time = 3;
}

message Symbol {
    string symbol = 1;
    ExchangeId exchange = 2;
    uint32 base_asset_precision = 3;
    uint32 quote_asset_precision = 4;
}
message Signal {
    SignalSource source = 1;
    Side side = 2;
    Symbol symbol = 3;
    float probability = 4;



}

message NotifySignalResponse {
    bool confirmed = 1;
}